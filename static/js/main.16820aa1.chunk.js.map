{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","color","backgroundColor","bgStyle","setBgStyle","toggleButton","setToggleButton","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","Alert","props","alert","role","word","lower","toLowerCase","charAt","toUpperCase","slice","captilize","msg","Navbar","show","setShow","title","about","mode","toggleMode","toggleRed","toggleGreen","to","aria-label","aria-current","href","htmlFor","defaultProps","TextForm","text","setText","essay","document","getElementById","heading","rows","value","onChange","event","userInput","target","length","innerHTML","select","navigator","clipboard","writeText","newText","split","join","App","darkMode","setDarkMode","setAlert","showAlert","message","setTimeout","body","path","exact","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.16820aa1.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst About = () => {\r\n    const [bgStyle, setBgStyle] = useState({\r\n        color:'black',\r\n        backgroundColor:'white'\r\n    });\r\n    const [toggleButton, setToggleButton] = useState('Enable Dark mode')\r\n   \r\n    const enableDarkMode=()=>{\r\n      if(bgStyle.color==='black'){\r\n          setBgStyle({\r\n            color:'white',\r\n            backgroundColor:'black'\r\n        })\r\n        setToggleButton('Enable Light mode')\r\n    }else{\r\n        setBgStyle({\r\n            color:'black',\r\n            backgroundColor:'white'\r\n        }) \r\n        setToggleButton('Enable Dark mode')\r\n\r\n      }\r\n        }\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={bgStyle}>\r\n        <h1>About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingOne\">\r\n              <button\r\n                className=\"accordion-button\"\r\n                type=\"button\" style={bgStyle}\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseOne\"\r\n                aria-expanded=\"true\"\r\n                aria-controls=\"collapseOne\"\r\n              >\r\n                Accordion Item #1\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseOne\"\r\n              className=\"accordion-collapse collapse show\"\r\n              aria-labelledby=\"headingOne\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={bgStyle}>\r\n                <strong>This is the first item's accordion body.</strong> It is\r\n                shown by default, until the collapse plugin adds the appropriate\r\n                classes that we use to style each element. These classes control\r\n                the overall appearance, as well as the showing and hiding via\r\n                CSS transitions. You can modify any of this with custom CSS or\r\n                overriding our default variables. It's also worth noting that\r\n                just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\" style={bgStyle}\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseTwo\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseTwo\"\r\n              >\r\n                Accordion Item #2\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseTwo\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingTwo\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={bgStyle}>\r\n                <strong>This is the second item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div className=\"accordion-item\">\r\n            <h2 className=\"accordion-header\" id=\"headingThree\" style={bgStyle}>\r\n              <button\r\n                className=\"accordion-button collapsed\"\r\n                type=\"button\" style={bgStyle}\r\n                data-bs-toggle=\"collapse\"\r\n                data-bs-target=\"#collapseThree\"\r\n                aria-expanded=\"false\"\r\n                aria-controls=\"collapseThree\"\r\n              >\r\n                Accordion Item #3\r\n              </button>\r\n            </h2>\r\n            <div\r\n              id=\"collapseThree\"\r\n              className=\"accordion-collapse collapse\"\r\n              aria-labelledby=\"headingThree\"\r\n              data-bs-parent=\"#accordionExample\"\r\n            >\r\n              <div className=\"accordion-body\" style={bgStyle}>\r\n                <strong>This is the third item's accordion body.</strong> It is\r\n                hidden by default, until the collapse plugin adds the\r\n                appropriate classes that we use to style each element. These\r\n                classes control the overall appearance, as well as the showing\r\n                and hiding via CSS transitions. You can modify any of this with\r\n                custom CSS or overriding our default variables. It's also worth\r\n                noting that just about any HTML can go within the{\" \"}\r\n                <code>.accordion-body</code>, though the transition does limit\r\n                overflow.\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      <button className=\"btn btn-primary my-5\" onClick={enableDarkMode}>{toggleButton}</button>\r\n\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default About;\r\n","import React from 'react'\r\n\r\nconst Alert = (props) => {\r\n    const {alert}=props;\r\n    const captilize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1)\r\n    }\r\n    return (\r\n        alert && <>\r\n         <div className={`alert alert-${alert.type} alert-dismissible fade show`} role=\"alert\">\r\n  <strong>{captilize(alert.type)} ! </strong> {alert.msg}\r\n  \r\n</div>   \r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nexport default function Navbar(props) {\r\n\r\n\r\n  const [show, setShow] = useState(false)\r\n  const { title, about, mode, toggleMode ,toggleRed,toggleGreen} = props;\r\n\r\n\r\n  return (\r\n    <>\r\n      <nav className={`navbar navbar-expand-lg navbar-${mode === 'dark' ? 'dark' : 'light'} bg-${mode === 'dark' ? 'dark' : 'light'}`}>\r\n        <div className=\"container-fluid\">\r\n          <Link className=\"navbar-brand\" to=\"/\">{title}</Link>\r\n          <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\" onClick={() => { setShow(!show) }}></span>\r\n          </button>\r\n          <div className={`collapse navbar-collapse ${show ? 'show' : ''}`} >\r\n            <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <Link className=\"nav-link\" to=\"/about\">{about}</Link>\r\n              </li>\r\n              <li className=\"nav-item\">\r\n                <a className=\"nav-link\" href=\"#\">Contact Us</a>\r\n              </li>\r\n\r\n            </ul>\r\n           \r\n            <div className={`form-check form-switch text-${mode === 'dark' ? 'white' : \"dark\"}`}>\r\n              <input className=\"form-check-input\" onClick={toggleMode} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {mode === 'dark' ? 'light' : \"dark\"} mode</label>\r\n            </div>\r\n            <div className={`form-check form-switch text-${mode === 'dark' ? 'white' : \"dark\"}`}>\r\n              <input className=\"form-check-input\" onClick={toggleRed} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {mode === 'dark' ? 'light' : \"red\"} mode</label>\r\n            </div>\r\n            <div className={`form-check form-switch text-${mode === 'dark' ? 'white' : \"dark\"}`}>\r\n              <input className=\"form-check-input\" onClick={toggleGreen} type=\"checkbox\" id=\"flexSwitchCheckDefault\" />\r\n              <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {mode === 'dark' ? 'light' : \"green\"} mode</label>\r\n            </div>\r\n            \r\n            {/* <form className='d-flex'>\r\n              <input className=\"form-control me-2\" placeholder=\"Search\" aria-label=\"Search\" />\r\n              <button className=\"btn btn-outline-success\" >Search</button>\r\n\r\n            </form> */}\r\n          </div>\r\n        </div>\r\n      </nav>\r\n    </>\r\n  );\r\n}\r\n\r\nNavbar.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  about: PropTypes.string.isRequired\r\n\r\n}\r\nNavbar.defaultProps = {\r\n  title: 'textUtils',\r\n  about: 'About'\r\n}","import React, { useState } from 'react'\r\n\r\nconst TextForm = (props) => {\r\n    \r\n    const [text, setText] = useState('');\r\n    //    Add user input to state variable \"text\"\r\n    const textAreaInput = (event) => {\r\n        const userInput = event.target.value;\r\n        setText(userInput);\r\n    }\r\n    //    Conver state variable \"text\" into Upper Case\r\n    const convertUpper = () => {\r\n        setText(text.toUpperCase())\r\n        alert('Converted to UpperCase' ,'success')\r\n    }\r\n    //    Conver state variable \"text\" into Lower Case\r\n    const convertLower = () => {\r\n        setText(text.toLowerCase())\r\n        alert('Converted to LowerCase' ,'success')\r\n\r\n    }\r\n    //    Remove state variable \"text\" data \r\n    const removeText = () => {\r\n\r\n        setText('')\r\n    }\r\n    //Check length for Essay\r\n    const essay = document.getElementById('essay');\r\n\r\n    const forEssay = () => {\r\n\r\n        if (text.length > 400 && text.length < 700) {\r\n            essay.innerHTML = `Length ${text.length} OK for Essay`\r\n        } else {\r\n            essay.innerHTML = `Length ${text.length} enter more data`\r\n        }\r\n    }\r\n    const handleCopy = () => {\r\n        const Inputtext = document.getElementById('textBox');\r\n        Inputtext.select();\r\n        \r\n        navigator.clipboard.writeText(text)\r\n       \r\n\r\n    }\r\n    //Remove Extra Spaces \r\n    const handleSpaces = () => {\r\n        \r\n        let newText = (text.split(/[ ]+/));\r\n        \r\n        setText(newText.join(\" \"))\r\n\r\n    }\r\n    \r\n    const {heading,mode,alert}=props;\r\n    \r\n    return (\r\n        <>\r\n            <div className=\"container my-3 \" style={{color:`${mode===\"light\"?'#0d2f51':'white'}`}}>\r\n                <h2 className='mb-3'>{heading}</h2>\r\n                <textarea className=\"form-control \" style={{backgroundColor:`${mode===\"light\"?'white':'grey'}`,color:`${mode===\"light\"?'black':'white'}`}} id=\"textBox\" rows=\"8\" value={text} onChange={textAreaInput}  ></textarea>\r\n                <div className=\"mt-4\">\r\n                    <button className=\"btn btn-primary me-2 \" onClick={convertUpper}>Convert UpperCase</button>\r\n                    <button className=\"btn btn-warning me-2\" onClick={convertLower}>Convert LowerCase</button>\r\n                    <button className=\"btn btn-secondary m-2\" onClick={forEssay}>For Essay</button>\r\n                    <button className=\"btn btn-danger m-2\" onClick={removeText}>Remove Text</button>\r\n                    <button className=\"btn btn-danger m-2\" onClick={handleCopy}>Copy Text</button>\r\n                    <button className=\"btn btn-dark\" onClick={handleSpaces}>Remove Exta Spaces</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"container\" style={{color:`${mode===\"light\"?'#0d2f51':'white'}`}} >\r\n                <p>Time to read <b>{0.008 * text.split(' ').length}</b></p>\r\n                <h3>Your text Summary</h3>\r\n                <p><b>{text.length>=1?text.split(' ').length:0}</b> words and <b>{text.length}</b> Characters</p>\r\n                <h5 id='essay'></h5>\r\n                <h3>Preview</h3>\r\n                <p>{text.length>0?text:'Type Some Text in text Area'}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default TextForm\r\n","import React, { useState } from 'react';\nimport './App.css';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\"\n\n\nfunction App() {\n  const [darkMode, setDarkMode] = useState('light')\n  const [alert, setAlert] = useState(null)\n  \n  //Button toggle to light mode and dark mode\n  const toggleModes = () => {\n \n    if(darkMode==='dark'){\n      setDarkMode('light')\n      document.body.style.backgroundColor='white'\n      showAlert('Light mode Enabled','success')\n      document.title=\"TextUtils-Light\"\n      \n    }else{\n      setDarkMode('dark')\n      document.body.style.backgroundColor='#0d2f51'\n      showAlert('Dark mode Enabled','secondary')\n      // setInterval(() => {\n      // document.title=\"TextUtils-Amazing\"\n        \n      // }, 1300);\n      // setInterval(() => {\n        \n      //   document.title=\"TextUtils-good\"\n      // }, 2000);\n      \n    }\n  }\n  const redModes = () => {\n \n    if(darkMode==='dark'){\n      setDarkMode('light')\n      document.body.style.backgroundColor='white'\n      showAlert('Light mode Enabled','success')\n    }else{\n      setDarkMode('dark')\n      document.body.style.backgroundColor='#360c0c'\n      showAlert('Red mode Enabled','danger')\n    }\n  }\n  const greenModes = () => {\n \n    if(darkMode==='dark'){\n      setDarkMode('light')\n      document.body.style.backgroundColor='white'\n      showAlert('Light mode Enabled','success')\n    }else{\n      setDarkMode('dark')\n      document.body.style.backgroundColor='#1d563c'\n      showAlert('Green mode Enabled','success')\n    }\n  }\n\n  //Show Alert when use interact with website\n  const showAlert=(message,type)=>{\n setAlert({\n   msg:message,\n   type:type\n })\n setTimeout(() => {\n   setAlert(null)\n }, 2000);\n  }\n  \n  \n return (\n    <>\n    <Router>\n\n      <Navbar title='textUtils' about='About' mode={darkMode} toggleMode={toggleModes} toggleRed={redModes} toggleGreen={greenModes} />\n      <Alert alert={alert}/>\n      <Route path=\"/about\">\n            <About />\n          </Route>\n         \n          <Route exact path=\"/\">\n          <TextForm heading='Enter your text to analyze below' mode={darkMode} alert={showAlert}/>\n          </Route>\n     \n      \n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}